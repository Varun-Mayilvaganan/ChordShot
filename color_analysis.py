# -*- coding: utf-8 -*-
"""color_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pHIvD1uLK0hHSDnb0PEbRvcPYjQtkgzK
"""

import cv2
import numpy as np
import json
from sklearn.cluster import KMeans
from collections import Counter
import webcolors

# Function to find the closest color name from a given RGB value
def get_color_name(rgb):
    min_distance = float("inf")
    closest_color = None
    for color_name in webcolors.CSS3_NAMES_TO_HEX:
        hex_value = webcolors.name_to_hex(color_name)
        r_c, g_c, b_c = webcolors.hex_to_rgb(hex_value)
        distance = np.sqrt((r_c - rgb[0]) ** 2 + (g_c - rgb[1]) ** 2 + (b_c - rgb[2]) ** 2)
        if distance < min_distance:
            min_distance = distance
            closest_color = color_name
    return closest_color

# Extract Two Dominant Colors
def extract_dominant_colors(image_path, k=4):
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = image.reshape((-1, 3))

    # K-Means Clustering
    kmeans = KMeans(n_clusters=k, n_init=10)
    kmeans.fit(image)

    # Find the two most common colors
    counter = Counter(kmeans.labels_)
    top_two_indices = [idx for idx, _ in counter.most_common(2)]
    top_two_colors = [kmeans.cluster_centers_[idx].astype(int) for idx in top_two_indices]

    # Convert to color names
    return [get_color_name(tuple(color)) for color in top_two_colors]

# Save Colors to JSON
def save_colors(image_path, json_file="image_features.json"):
    colors = extract_dominant_colors(image_path)

    try:
        with open(json_file, "r") as f:
            data = json.load(f)
    except FileNotFoundError:
        data = {}

    data["dominant_colors"] = colors

    with open(json_file, "w") as f:
        json.dump(data, f, indent=4)

    print(f"Dominant colors saved: {colors}")

# Run the Module
if __name__ == "__main__":
    image_path = "sample.jpg"
    save_colors(image_path)